/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package LPZFILES;

import java.awt.Image;
import java.awt.Rectangle;
import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.HashMap;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author PETER SAMUEL OCHE
 */
public class COMPRESSION extends javax.swing.JFrame {
    public static HashMap<String, Integer> dictionary = new HashMap<>();
    public static int dictSize = 256;
    public static String P = "",filename="",BP="";
    public static byte inputByte;
    public static byte[] buffer = new byte[3];
    public static boolean isLeft = true;
  

    /**
     * Creates new form COMPRESS
     */
    public COMPRESSION() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        url = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        About = new javax.swing.JMenuItem();
        Help = new javax.swing.JMenuItem();
        Back = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("COMPRESSION");
        setBounds(new java.awt.Rectangle(200, 100, 200, 100));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/COM.PNG"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 440, 170, 40));

        url.setBorder(null);
        getContentPane().add(url, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 150, 260, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/compression.PNG"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 970, 540));

        jMenu1.setText("File");

        About.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        About.setText("About");
        About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutActionPerformed(evt);
            }
        });
        jMenu1.add(About);

        Help.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        Help.setText("Help");
        Help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpActionPerformed(evt);
            }
        });
        jMenu1.add(Help);

        Back.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        Back.setText("Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });
        jMenu1.add(Back);

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         
        filename = url.getText();
        try {
            File file = new File(filename);
            compress();
            String[] getFileNameWOExtn = filename.split("\\.");
           JOptionPane.showMessageDialog(null,"Compression complete! file saved: "+getFileNameWOExtn[0].concat(".lzw")+"!");      
        }
        catch(IOException ie) {
        JOptionPane.showMessageDialog(null,"File "+filename+" not found!");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutActionPerformed
        // TODO add your handling code here:
         JOptionPane.showMessageDialog(null, "ABOUT THIS SOFTWARE");
    }//GEN-LAST:event_AboutActionPerformed

    private void HelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "HELP OF THIS SOFTWARE");
    }//GEN-LAST:event_HelpActionPerformed

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        // TODO add your handling code here:
       dispose();
       new Splash().setVisible(true);
    }//GEN-LAST:event_BackActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_ExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(COMPRESSION.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(COMPRESSION.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(COMPRESSION.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(COMPRESSION.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new COMPRESSION().setVisible(true);
            }
        });
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem About;
    private javax.swing.JMenuItem Back;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenuItem Help;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JTextField url;
    // End of variables declaration//GEN-END:variables


     public static void compress() throws IOException {
        
        int i,byteToInt;
        char C;
        
        // Character dictionary 
        for(i=0;i<256;i++) {
            dictionary.put(Character.toString((char)i),i);
        }
        
        // Read input file and output file
        RandomAccessFile inputFile = new RandomAccessFile(filename,"r");
        String[] getFileNameWOExtn = filename.split("\\.");
        RandomAccessFile outputFile = new RandomAccessFile(getFileNameWOExtn[0].concat(".lzw"),"rw");
        
        try {
        
            // Read first byte to initialize P
            inputByte = inputFile.readByte();
            byteToInt = new Byte(inputByte).intValue();
            
            if(byteToInt < 0) byteToInt += 256;
            C = (char) byteToInt;
            P = ""+C;
            
            while(true) {
                inputByte = inputFile.readByte();
                byteToInt = new Byte(inputByte).intValue();
            
                if(byteToInt < 0) byteToInt += 256;
                C = (char) byteToInt;
                
                // if P+C is present in dictionary
                if(dictionary.containsKey(P+C)) {
                    P = P+C;
                }
                
                /* 
                    if P+C is not in dictionary, we obtain the longest string in the dictionary 
                    so far which is stored in P. The value of this string is converted in binary. 
                    This binary number is then padded to make it 12 bits long (for standardization
                    and avoing overflow or underflow caused using 8 bits). This is then converted 
                    into bytes and stored.
                   
                    We write in the file every 2 characters.
                */
                else {
                    BP = convertTo12Bit(dictionary.get(P));
                    if(isLeft) {
                        buffer[0] = (byte) Integer.parseInt(BP.substring(0,8),2);  
                        buffer[1] = (byte) Integer.parseInt(BP.substring(8,12)+"0000",2);                   
                    }
                    else {
                        buffer[1] += (byte) Integer.parseInt(BP.substring(0,4),2); 
                        buffer[2] = (byte) Integer.parseInt(BP.substring(4,12),2);
                        for(i=0;i<buffer.length;i++) {
                            outputFile.writeByte(buffer[i]);
                            buffer[i]=0;
                        }
                    }
                    isLeft = !isLeft;
                    if(dictSize < 4096) dictionary.put(P+C,dictSize++);
                    
                    P=""+C;
                }            
            }
        
        }
        /*  
            If isLeft is true, we store the current data in BP to buffer[0] and buffer[1]. Then these 
            buffers are written in the output file.
            If isLeft is false, we already have data in the first and half of seccond byte of the 
            buffer. Hence, we store the current value of BP and write all the 3 bytes to the outputFile. 
            
            When the file input is complete, the while loop will still execute due to the condition.
            This ensures that the file is read completely but it might throw an error if there is 
            no input left in the inputFile. So, when an error is thrown, we store the remaining contents
            of the buffer.
        */
        catch(IOException ie) {
            BP = convertTo12Bit(dictionary.get(P));
            if(isLeft) {
                buffer[0] = (byte) Integer.parseInt(BP.substring(0,8),2);  
                buffer[1] = (byte) Integer.parseInt(BP.substring(8,12)+"0000",2);
                outputFile.writeByte(buffer[0]);  
                outputFile.writeByte(buffer[1]);                
            }
            else {
                buffer[1] += (byte) Integer.parseInt(BP.substring(0,4),2); 
                buffer[2] = (byte) Integer.parseInt(BP.substring(4,12),2);
                for(i=0;i<buffer.length;i++) {
                     outputFile.writeByte(buffer[i]);
                     buffer[i]=0;
                }
            }
            inputFile.close();
            outputFile.close();        
        }
    
    }
    
    public static String convertTo12Bit(int i) {
        String to12Bit = Integer.toBinaryString(i);
        while (to12Bit.length() < 12) to12Bit = "0" + to12Bit;
        return to12Bit;
    }
    

}
